CREATING A RANDOM ENEMY GENERATOR

[04/11/23]: PLANNING A RANDOM ENEMY SPAWN SYSTEM

Hello again, now I want the enemies to randomly generate within the map in a way that it
spawns around and far from the player in a way to have enough time to kill them making
the gameplay more fair.

To this I'm going to use the random() and the random_range() functions.

And I also have to implement a cooldown variable such as a spawn_limit variable.

RANDOMLY SPAWNING THE ENEMIES ON THE ROOM

1-take random positions>>
2-check if the position are into the desired coordinates>>
3-if so, spawn the enemies, spawning cooldown counts>>
4-count each spawn, if it hits the limit wait to the player kill all of them

[15/11/23]: FIRST RESULTS OF THE ALGORITM

In abstract, I did an algoritm that works quite well, but kind of the opposite of what
was actually planned. The first ideia consisted of spawning the enemies in random positions
in the map, but those positions couldn't be so close to the player, and also, the spawner
would had to handle a limit of how many enemies it could spawn.

Two of these were made succesfully, but until now, I couldn't figure out how to make the 
enemies spawn not so close to the player. So, before of trying to fix that I want to see 
what we already got of the actual algorithm.

First I made an especific object to set the spawn I named that object as oGame and it will
not only be resposible for random spawning but for others features as well. From this I 
set a bunch of variables to keep track of the amount of enemies, the time between the spawns
and to sort the random positions.

These are the variables made for this algorithm:

	spawn_limit = 5;
	spawn_cd = 25;
	r_value_x = random_range(0, room_width)
	r_value_y = random_range(0, room_height)

Another variable that isn't related with the oGame object is player_range[], wich declares
the extreme coordinates of an area around the player which will be refered as 
"around the player"

	player_range = [x-256, y-256, x+256, y+256]

These will be used to say when the enemy is able to spawn or not through some conditions.
the piece of code responsible for this operation is:

	function random_enemy_spawn ()
	{
	
		show_debug_message("running random spawn script")
		r_value_x = random_range(0, room_width)
		r_value_y = random_range(0, room_height)
	
		if(r_value_x >= oPlayer.player_range[0] && r_value_y >= oPlayer.player_range[1]
			&& instance_number(oEnemy) < spawn_limit)
		{
		
			if(r_value_x <= oPlayer.player_range[2] && r_value_y <= oPlayer.player_range[3])
			{
		
					instance_create_layer(r_value_x,r_value_y, "Enemies", oEnemy);
					show_debug_message("another enemy spawned")
			
			}
		}	
	}
	
This function will be constantly updated in order make the enemies spawn until the game
is closed. Each part has an utility, which are:

	1-Choose a random position
	
		r_value_x = random_range(0, room_width)
		r_value_y = random_range(0, room_height)
		
	2-Verify if the position is "around the player"
		
		if(r_value_x >= oPlayer.player_range[0] && r_value_y >= oPlayer.player_range[1]
			&& instance_number(oEnemy) < spawn_limit)
		{
		
		if(r_value_x <= oPlayer.player_range[2] && r_value_y <= oPlayer.player_range[3])
		{
			
	3-And finally, spawn the enemy
	
		instance_create_layer(r_value_x,r_value_y, "Enemies", oEnemy);
		show_debug_message("another enemy spawned")	
		
Perceive that, when the position is being verified the code also checks if the the number
of current enemies had hit the limit:

		&& instance_number(oEnemy) < spawn_limit)
		
In conclusion, the code sort a random position, check if the position is "around the player"
AND if the limit hasn't reached and if it's true a enemy is spawned.

There are some things that still need to be done, like the cooldown, and fixed, just as 
the spawn area.

Actually the spawn area should be beyond of "around the player", because it is still too 
close from the player, making it really hard to keep on. And also, the enemies are spawning
too fast not allowing the player to react properly. So, in conclusion, the cooldown variable 
need to be used to limit the spawn, and the spawning area need to be changed in a way to 
allow the player to move and react "correctly".